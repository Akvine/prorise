--liquibase formatted sql logicalFilePath:db/changelog/migration-oracle-1.0-initial-schema.sql

--changeset lymar-sa:RISE-1-1
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'DEPARTMENT_TYPE'
CREATE TABLE DEPARTMENT_TYPE
(
    ID BIGINT NOT NULL,
    UUID VARCHAR(255) NOT NULL,
    CODE VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    TYPE VARCHAR(255),
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    CONSTRAINT DEPARTMENT_TYPE_PK PRIMARY KEY (id)
);
CREATE SEQUENCE DEPARTMENT_TYPE_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-2
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'DEPARTMENT'
CREATE TABLE DEPARTMENT
(
    ID BIGINT NOT NULL,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    TITLE VARCHAR(255) NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DEPARTMENT_TYPE_ID BIGINT NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    CONSTRAINT DEPARTMENT_PKEY PRIMARY KEY (id),
    CONSTRAINT DEPARTMENT_DEPARTMENT_TYPE_FK FOREIGN KEY (DEPARTMENT_TYPE_ID)
        REFERENCES DEPARTMENT_TYPE (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE DEPARTMENT_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-3
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'TEAM'
CREATE TABLE TEAM
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED boolean NOT NULL,
    DELETED_DATE date,
    UPDATED_DATE date,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    DEPARTMENT_ID BIGINT NOT NULL,
    CONSTRAINT TEAM_PKEY PRIMARY KEY (ID),
    CONSTRAINT TEAM_DEPARTMENT_FK FOREIGN KEY (DEPARTMENT_ID)
        REFERENCES DEPARTMENT (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE TEAM_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-4
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'PROJECT'
CREATE TABLE PROJECT
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    IS_DONE BOOLEAN NOT NULL,
    END_DATE DATE,
    STARTED_DATE DATE NOT NULL,
    PROJECT_TYPE VARCHAR(255),
    TEAM_ID BIGINT NOT NULL,
    CONSTRAINT PROJECT_PKEY PRIMARY KEY (ID),
    CONSTRAINT PROJECT_TEAM_FK FOREIGN KEY (TEAM_ID)
        REFERENCES TEAM (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE PROJECT_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-5
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'EMPLOYER'
CREATE TABLE EMPLOYER
(
    ID BIGINT NOT NULL,
    UUID VARCHAR(255) NOT NULL,
    FIRST_NAME VARCHAR(255) NOT NULL,
    SECOND_NAME VARCHAR(255) NOT NULL,
    THIRD_NAME VARCHAR(255),
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    DISMISSAL_DATE DATE,
    EMPLOYMENT_DATE DATE NOT NULL,
    EMPLOYER_TYPE VARCHAR(255) NOT NULL,
    TEAM_ID BIGINT NOT NULL,
    CONSTRAINT EMPLOYER_PK PRIMARY KEY (ID),
    CONSTRAINT EMPLOYER_TEAM_FK FOREIGN KEY (TEAM_ID)
        REFERENCES TEAM (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE EMPLOYER_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-6
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'GOAL'
CREATE TABLE GOAL
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    IS_DONE BOOLEAN NOT NULL,
    PROJECT_ID BIGINT NOT NULL,
    CONSTRAINT GOAL_PKEY PRIMARY KEY (ID),
    CONSTRAINT GOAL_PROJECT_FK FOREIGN KEY (PROJECT_ID)
        REFERENCES PROJECT (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE GOAL_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-7
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'TASK'
CREATE TABLE TASK
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255) NOT NULL,
    IS_DONE BOOLEAN NOT NULL,
    END_DATE DATE,
    PRIORITY_TYPE VARCHAR(255) NOT NULL,
    STARTED_DATE DATE NOT NULL,
    STATUS VARCHAR(255) NOT NULL,
    TITLE VARCHAR(255) NOT NULL,
    EMPLOYER_ID BIGINT NOT NULL,
    GOAL_ID BIGINT NOT NULL,
    CONSTRAINT TASK_PKEY PRIMARY KEY (ID),
    CONSTRAINT TASK_GOAL_FK FOREIGN KEY (GOAL_ID)
        REFERENCES GOAL (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT TASK_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE TASK_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-8
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'SALARY'
CREATE TABLE SALARY
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    CURRENCY_TYPE VARCHAR(255) NOT NULL,
    SALARY BIGINT NOT NULL,
    EMPLOYER_ID BIGINT NOT NULL,
    CONSTRAINT SALARY_PKEY PRIMARY KEY (ID),
    CONSTRAINT SALARY_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE SALARY_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-9
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'CONTACT'
CREATE TABLE CONTACT
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255),
    PHONE VARCHAR(255),
    EMPLOYER_ID BIGINT NOT NULL,
    CONSTRAINT CONTACT_PKEY PRIMARY KEY (ID),
    CONSTRAINT CONTACT_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE CONTACT_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-10
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'COMPETENCE'
CREATE TABLE COMPETENCE
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    IS_ACTIVE BOOLEAN NOT NULL,
    EXPERIENCE BIGINT NOT NULL,
    TECHNOLOGY VARCHAR(255),
    TYPE INTEGER NOT NULL,
    EMPLOYER_ID BIGINT NOT NULL,
    CONSTRAINT COMPETENCE_PKEY PRIMARY KEY (ID),
    CONSTRAINT COMPETENCE_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE COMPETENCE_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-11
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'AWARD'
CREATE TABLE AWARD
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    DESCRIPTION VARCHAR(255),
    REASON VARCHAR(255),
    RECEIPT_DATE DATE,
    TITLE VARCHAR(255) NOT NULL,
    EMPLOYER_ID bigint NOT NULL,
    CONSTRAINT AWARD_PKEY PRIMARY KEY (ID),
    CONSTRAINT AWARD_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE AWARD_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-12
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'ADDRESS'
CREATE TABLE ADDRESS
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255) NOT NULL,
    COUNTRY VARCHAR(255) NOT NULL,
    EMPLOYER_ID BIGINT NOT NULL,
    CONSTRAINT ADDRESS_PKEY PRIMARY KEY (ID),
    CONSTRAINT ADDRESS_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE ADDRESS_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required

--changeset lymar-sa:RISE-1-13
--preconditions onFail:MARK_RAN onError:HALT onUpdateSql:FAIL
--precondition-sql-check expectedResult:0 select count(*) from information_schema.tables where table_name = 'TRAINING'
CREATE TABLE TRAINING
(
    ID BIGINT NOT NULL,
    CREATED_DATE DATE NOT NULL,
    IS_DELETED BOOLEAN NOT NULL,
    DELETED_DATE DATE,
    UPDATED_DATE DATE,
    UUID VARCHAR(255)  NOT NULL,
    CURRENCY_TYPE INTEGER NOT NULL,
    DESCRIPTION VARCHAR(255),
    END_DATE DATE NOT NULL,
    PRICE BIGINT NOT NULL,
    START_DATE DATE NOT NULL,
    TITLE VARCHAR(255) NOT NULL,
    EMPLOYER_ID BIGINT NOT NULL,
    CONSTRAINT TRAINING_PKEY PRIMARY KEY (ID),
    CONSTRAINT TRAINING_EMPLOYER_FK FOREIGN KEY (EMPLOYER_ID)
        REFERENCES EMPLOYER (ID)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);
CREATE SEQUENCE TRAINING_ID_SEQUENCE START WITH 1 INCREMENT BY 1000;
--rollback not required